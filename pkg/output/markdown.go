package output

import (
	"fmt"
	"os"

	"github.com/mogensen/helm-changelog/pkg/helm"
	"github.com/pterm/pterm"
)

// Markdown creates a markdown representation of the changelog at the changeLogFilePath path
func Markdown(l *pterm.Logger, changeLogFilePath, releaseTemplatePath string, releases []*helm.Release) error {

	// reverse commits
	for _, release := range releases {
		release.Commits = reverseCommits(release.Commits)
	}

	// reverse releases
	releases = reverseReleases(releases)
	l.Debug("Creating changelog", l.Args("file", changeLogFilePath))
	f, err := os.Create(changeLogFilePath)
	if err != nil {
		return fmt.Errorf("Failed creating changelog file: %s", err)
	}

	defer f.Close()

	f.WriteString("# Change Log\n\n")

	tmpl, err := getReleaseTemplate(changeLogFilePath, releaseTemplatePath)
	if err != nil {
		return fmt.Errorf("Error retrieving release template: %s", err)
	}

	for _, release := range releases {
		err = tmpl.Execute(f, release)
		if err != nil {
			return fmt.Errorf("Error executing template: %s", err)
		}
	}

	f.WriteString("---\n")
	// TODO Add version number
	f.WriteString(fmt.Sprintln("Autogenerated from Helm Chart and git history using [helm-changelog](https://github.com/mogensen/helm-changelog)"))

	return nil
}
